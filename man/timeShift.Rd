% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/timeShift.R
\name{timeShift}
\alias{timeShift}
\title{Time shift}
\usage{
timeShift(
  x1,
  scaledPeriod,
  model,
  conditions,
  param = list(),
  control = list(),
  interpolation = "linear"
)
}
\arguments{
\item{x1}{\code{numeric} vector of initial time from which evaluate the scaling}

\item{scaledPeriod}{\code{numeric} vector of period in the scaled domain to add to \code{x1}.}

\item{model}{\code{character} corresponding to the name of the rate model.}

\item{conditions}{\code{data.frame} with columns named \code{time} and variables expected to correspond to those of the model.}

\item{param}{\code{list} parameters of the model.}

\item{control}{\code{list} of arguments that control the behaviour of the model.}

\item{interpolation}{\code{character} corresponding to the name of the interpolating method for conditions. Available methods include \code{constant} and \code{linear}.}
}
\value{
Return a vector of the same length as \code{x1} and \code{x2} representing the scaled time elapsed between those values.
}
\description{
Evaluate the time elapsed between two bounds (x1, x2) into a scaled domain given a rate model and condtions that represent its variables.
}
\details{
Note that \code{x1} and the calculated \code{x2} must be in the time range provided by conditions. See the details section of \code{timescale} for the structure of \code{conditions} and \code{model}.
}
\examples{
#Setting entries
conditions <- data.frame(time = seq(0,50,length.out = 100), temp = rnorm(10, 10, 5))
condModel <- interpolateCond(conditions, method = "linear")
model <- "modelLinear"
param = list(a = 1, T0 = 10)
x1 = seq(1,10,length.out = 10)
scaledPeriod = rep(10,10)
interpolation = "linear"
control = list()
inverse = FALSE

#Calculating x2 time values
x2 <- timeShift(x1, scaledPeriod = scaledPeriod, model = model, conditions = conditions, param = param, interpolation = "linear")
x2
}
