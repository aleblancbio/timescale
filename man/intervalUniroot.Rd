% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/intervalUniroot.R
\name{intervalUniroot}
\alias{intervalUniroot}
\title{Interval uniroot}
\usage{
intervalUniroot(
  f,
  lower,
  upper,
  correction = "lower",
  gradient = NULL,
  tol = .Machine$double.eps^0.5,
  ...
)
}
\arguments{
\item{f}{a function for which to find the root, and passed to \code{uniroot}.}

\item{lower}{the lower end-point of the interval to be searched for the root.}

\item{upper}{the upper end-point of the interval to be searched for the root.}

\item{correction}{a \code{character} indicating to which value of the interval correct the root, either \code{lower}, \code{upper} or \code{none}. The latter return the same value as \code{uniroot}.}

\item{gradient}{a function corresponding to the derivative of f (optional)}

\item{tol}{\code{numeric}, the absolute tolerance on the argument of \code{f}, specifying when to stop searching for limits of the interval. By default, correspond to the square root of the machine's precision.}

\item{...}{additional arguments to pass to the function \code{f} or the function \code{uniroot}.}

\item{args}{arguments to pass to the function \code{f}}
}
\value{
Return only the root (a constant), other components returned by \code{uniroot} are dismissed.
}
\description{
Extend the \code{uniroot} function from \code{stats} by accepting intervals on which the function is constant. The function then return one of the endpoints of the interval. Note than the function must be either increasing or decreasing, although not necessarily strictly.
}
\details{
The function first estimate the root using \code{uniroot}. If the derivative is also zero, the function search for an interval and instead return its lowest or highest value (according to \code{correction}). The algorithm stop when increment on the argument of \code{f} reached absolute tolerance specified by \code{tol}.
}
\examples{
#Define a function that reach zero at a +- delta
g <- function(x, a, delta){
 y <- rep(0,length = length(x))
 y[x <= a - delta] <- x[x <= a - delta] - (a - delta)
 y[x >= a + delta] <- x[x >= a + delta] - (a + delta)
 
 return(y)  
}

gradient <- function(x, a, delta){
 y <- rep(0,length = length(x))
 y[x <= a - delta] <- 1
 y[x >= a + delta] <- 1
 return(y)  
}

#Define parameters and range on which the function is known to be constant
a <- 5
delta <- 1
lower = - 10
upper = 10
correction = "lower"
intervalUniroot(g, lower, upper, correction = "lower", tol = 1e-4, a = a, delta = delta)
intervalUniroot(g, lower, upper, correction = "upper", tol = 1e-4, a = a, delta = delta)
intervalUniroot(g, lower, upper, correction = "upper", a = a, delta = delta)
intervalUniroot(g, lower, upper, correction = "upper", a = a, gradient = gradient, delta = delta)
uniroot(g, lower = lower, upper = upper, a = a, delta = delta)$root

}
