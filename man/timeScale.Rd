% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/timeScale.R
\name{timeScale}
\alias{timeScale}
\title{Time scale}
\usage{
timeScale(
  x1,
  x2,
  model,
  conditions,
  param = list(),
  control = list(),
  interpolation = "linear",
  inverse = FALSE
)
}
\arguments{
\item{x1}{\code{numeric} vector of initial time from which evaluate the scaling}

\item{x2}{\code{numeric} vector of final time until which evaluate the scaling}

\item{model}{\code{character} corresponding to the name of the rate model.}

\item{conditions}{\code{data.frame} with columns named \code{time} and variables expected to correspond to those of the model.}

\item{param}{\code{list} parameters of the model.}

\item{control}{\code{list} of arguments that control the behaviour of the model.}

\item{interpolation}{\code{character} corresponding to the name of the interpolating method for conditions. Available methods include \code{constant} and \code{linear}.}

\item{inverse}{\code{logical} indicating if the inverse operation (i.e. scaled time to time transformation) should be performed.}
}
\value{
Return a vector of the same length as \code{x1} and \code{x2} representing the scaled time elapsed between those values.
}
\description{
Evaluate the time elapsed between two bounds (x1, x2) into a scaled domain given a rate model and condtions that represent its variables.
}
\details{
Note that \code{x1} and \code{x2} must be in the time range provided by conditions.
}
\examples{
conditions <- data.frame(time = seq(0,30,length.out = 10), temp = 20+rnorm(10, 10, 5))
condModel <- interpolateCond(conditions, method = "linear")
model <- "modelLinear"
param = list(a = 1, T0 = 10)
x1 = rep(0,10,length.out = 10)
x2 = seq(11,20,length.out = 10)
z2 <- timeScale(x1, x2, model = model, conditions = conditions, param = param, interpolation = "linear")
z1 <- rep(0,10,length.out = 10)
timeScale(z1, z2, model = model, conditions = conditions, param = param, interpolation = "linear", inverse = TRUE)

}
